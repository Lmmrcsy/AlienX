local HttpService = game:GetService("HttpService")
local Players = game:GetService("Players")
local TweenService = game:GetService("TweenService")
local UIS = game:GetService("UserInputService")
local RS = game:GetService("RunService")
local P = Players.LocalPlayer
local PG = P:WaitForChild("PlayerGui")
local RAW_URL = "https://raw.githubusercontent.com/Lmmrcsy/AlienX/refs/heads/main/uesruesr"
local REMOTE_SCRIPT = "https://raw.githubusercontent.com/Lmmrcsy/AlienX/refs/heads/main/Encrypted.lua"

-- 颜色配置
local COLOR = {
    PRIMARY = Color3.fromRGB(103, 58, 183),
    SUCCESS = Color3.fromRGB(76, 175, 80),
    ERROR = Color3.fromRGB(244, 67, 54),
    WARNING = Color3.fromRGB(255, 152, 0),
    BACKGROUND = Color3.fromRGB(25, 25, 25),
    CARD = Color3.fromRGB(35, 35, 35),
    TEXT = Color3.fromRGB(255, 255, 255),
    SUBTEXT = Color3.fromRGB(170, 170, 170)
}

-- 简化的通知函数
local function show(msg, msgType, duration)
    msgType = msgType or "info"
    duration = duration or 3
    
    local color = COLOR.TEXT
    if msgType == "success" then
        color = COLOR.SUCCESS
    elseif msgType == "error" then
        color = COLOR.ERROR
    elseif msgType == "warning" then
        color = COLOR.WARNING
    end
    
    -- 清理旧的通知
    pcall(function()
        if PG:FindFirstChild("ALX_NOTIF") then
            PG:FindFirstChild("ALX_NOTIF"):Destroy()
        end
    end)
    
    local gui = Instance.new("ScreenGui")
    gui.Name = "ALX_NOTIF"
    gui.Parent = PG
    gui.ZIndexBehavior = Enum.ZIndexBehavior.Sibling

    local mainFrame = Instance.new("Frame")
    mainFrame.Size = UDim2.new(0, 300, 0, 60)
    mainFrame.Position = UDim2.new(0.5, -150, 0, -70)
    mainFrame.AnchorPoint = Vector2.new(0.5, 0)
    mainFrame.BackgroundColor3 = COLOR.CARD
    mainFrame.BorderSizePixel = 0
    mainFrame.Parent = gui

    local corner = Instance.new("UICorner")
    corner.CornerRadius = UDim.new(0, 8)
    corner.Parent = mainFrame

    local messageLabel = Instance.new("TextLabel")
    messageLabel.Size = UDim2.new(1, -20, 1, -20)
    messageLabel.Position = UDim2.new(0, 10, 0, 10)
    messageLabel.BackgroundTransparency = 1
    messageLabel.TextColor3 = color
    messageLabel.Font = Enum.Font.GothamSemibold
    messageLabel.TextSize = 14
    messageLabel.Text = msg
    messageLabel.TextWrapped = true
    messageLabel.Parent = mainFrame

    -- 动画进入
    local enterTween = TweenService:Create(mainFrame, TweenInfo.new(0.4, Enum.EasingStyle.Back, Enum.EasingDirection.Out), {
        Position = UDim2.new(0.5, -150, 0, 20)
    })
    enterTween:Play()

    -- 等待并退出
    task.wait(duration)
    
    local exitTween = TweenService:Create(mainFrame, TweenInfo.new(0.3, Enum.EasingStyle.Quad, Enum.EasingDirection.In), {
        Position = UDim2.new(0.5, -150, 0, -70)
    })
    exitTween:Play()
    
    task.wait(0.3)
    pcall(function() gui:Destroy() end)
end

-- 简化的验证界面
local function createSimpleAuthUI()
    -- 清理旧界面
    pcall(function()
        if PG:FindFirstChild("ALX_AUTH_UI") then
            PG:FindFirstChild("ALX_AUTH_UI"):Destroy()
        end
    end)

    local gui = Instance.new("ScreenGui")
    gui.Name = "ALX_AUTH_UI"
    gui.Parent = PG
    gui.ZIndexBehavior = Enum.ZIndexBehavior.Sibling

    -- 背景遮罩
    local background = Instance.new("Frame")
    background.Size = UDim2.new(1, 0, 1, 0)
    background.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
    background.BackgroundTransparency = 0.2
    background.Parent = gui

    -- 主容器
    local mainContainer = Instance.new("Frame")
    mainContainer.Size = UDim2.new(0, 350, 0, 200)
    mainContainer.Position = UDim2.new(0.5, -175, 0.5, -100)
    mainContainer.BackgroundColor3 = COLOR.BACKGROUND
    mainContainer.BorderSizePixel = 0
    mainContainer.Parent = gui

    local containerCorner = Instance.new("UICorner")
    containerCorner.CornerRadius = UDim.new(0, 12)
    containerCorner.Parent = mainContainer

    -- 标题
    local title = Instance.new("TextLabel")
    title.Size = UDim2.new(1, 0, 0, 50)
    title.Position = UDim2.new(0, 0, 0, 10)
    title.BackgroundTransparency = 1
    title.TextColor3 = COLOR.TEXT
    title.Font = Enum.Font.GothamBold
    title.TextSize = 18
    title.Text = "AlienX 验证系统"
    title.Parent = mainContainer

    -- 状态文本
    local statusLabel = Instance.new("TextLabel")
    statusLabel.Size = UDim2.new(1, -40, 0, 40)
    statusLabel.Position = UDim2.new(0, 20, 0, 60)
    statusLabel.BackgroundTransparency = 1
    statusLabel.TextColor3 = COLOR.TEXT
    statusLabel.Font = Enum.Font.Gotham
    statusLabel.TextSize = 14
    statusLabel.Text = "正在初始化验证系统..."
    statusLabel.TextWrapped = true
    statusLabel.Parent = mainContainer

    -- 进度条背景
    local progressBackground = Instance.new("Frame")
    progressBackground.Size = UDim2.new(1, -40, 0, 6)
    progressBackground.Position = UDim2.new(0, 20, 0, 110)
    progressBackground.BackgroundColor3 = COLOR.CARD
    progressBackground.BorderSizePixel = 0
    progressBackground.Parent = mainContainer

    local progressCorner = Instance.new("UICorner")
    progressCorner.CornerRadius = UDim.new(1, 0)
    progressCorner.Parent = progressBackground

    -- 进度条前景
    local progressFill = Instance.new("Frame")
    progressFill.Size = UDim2.new(0, 0, 1, 0)
    progressFill.BackgroundColor3 = COLOR.PRIMARY
    progressFill.BorderSizePixel = 0
    progressFill.Parent = progressBackground

    local fillCorner = Instance.new("UICorner")
    fillCorner.CornerRadius = UDim.new(1, 0)
    fillCorner.Parent = progressFill

    -- 加载文本
    local loadingText = Instance.new("TextLabel")
    loadingText.Size = UDim2.new(1, -40, 0, 30)
    loadingText.Position = UDim2.new(0, 20, 0, 130)
    loadingText.BackgroundTransparency = 1
    loadingText.TextColor3 = COLOR.SUBTEXT
    loadingText.Font = Enum.Font.Gotham
    loadingText.TextSize = 12
    loadingText.Text = "请稍候..."
    loadingText.Parent = mainContainer

    -- 更新进度函数
    local function updateProgress(progress, text)
        statusLabel.Text = text or "处理中..."
        TweenService:Create(progressFill, TweenInfo.new(0.2), {
            Size = UDim2.new(progress, 0, 1, 0)
        }):Play()
    end

    return {
        Gui = gui,
        UpdateProgress = updateProgress,
        StatusLabel = statusLabel,
        LoadingText = loadingText
    }
end

-- 原有的收集设备信息函数
local function collect()
    local fp = {}
    fp.UserId = tostring(P.UserId or "")
    fp.Username = tostring(P.Name or "")
    fp.DisplayName = tostring(P.DisplayName or "")
    fp.IsStudio = RS:IsStudio() or false
    local ok, plat = pcall(function() return UIS:GetPlatform() end)
    fp.Platform = ok and tostring(plat) or (UIS.TouchEnabled and "Mobile" or "PC")
    local okx, xx, yy = pcall(function() return UIS:GetScreenResolution() end)
    fp.ScreenResolution = {x = (okx and xx) or 0, y = (okx and yy) or 0}
    local ok2, rf = pcall(function() return workspace.CurrentCamera and workspace.CurrentCamera:GetRenderFidelity() end)
    fp.RenderFidelity = ok2 and tostring(rf) or ""
    local ex = ""
    if type(identifyexecutor) == "function" then pcall(function() ex = identifyexecutor() end) end
    if ex == "" and type(getexecutor) == "function" then pcall(function() ex = getexecutor() end) end
    if ex == "" and syn and type(syn.getexecutor) == "function" then pcall(function() ex = syn.getexecutor() end) end
    if ex == "" and type(getscripthash) == "function" then pcall(function() ex = getscripthash() end) end
    fp.Executor = tostring(ex)
    fp.Timestamp = os.time()
    return fp
end

local function deviceMatches(dev, fp)
    if tostring(dev.UserId) ~= "" and tostring(dev.UserId) == tostring(fp.UserId) then return true end
    if dev.Username and dev.DisplayName and dev.Executor then
        if tostring(dev.Username) == tostring(fp.Username) and tostring(dev.DisplayName) == tostring(fp.DisplayName) and tostring(dev.Executor) == tostring(fp.Executor) then return true end
    end
    return false
end

-- 带错误处理的主验证流程
local function main()
    -- 先快速检查基本条件
    local key = (getfenv().ADittoKey or ""):gsub("%s+", "")
    if key == "" then
        show("卡密未设置", "error", 3)
        task.wait(2)
        P:Kick("卡密未设置")
        return
    end

    -- 创建UI
    local ui = createSimpleAuthUI()
    ui.UpdateProgress(0.1, "初始化系统...")
    
    -- 添加延迟确保UI创建完成
    task.wait(0.5)

    -- 收集设备信息
    ui.UpdateProgress(0.2, "收集设备信息...")
    local fp = collect()
    task.wait(0.3)

    -- 连接服务器
    ui.UpdateProgress(0.3, "连接验证服务器...")
    local ok, res = pcall(function() 
        return game:HttpGet(RAW_URL, true) 
    end)
    
    if not ok or not res or #res < 5 then
        ui.UpdateProgress(0, "服务器连接失败")
        show("无法连接验证服务器", "error", 4)
        task.wait(2)
        pcall(function() ui.Gui:Destroy() end)
        P:Kick("验证失败: 服务器连接错误")
        return
    end

    ui.UpdateProgress(0.5, "解析验证数据...")
    task.wait(0.3)

    -- 解析JSON数据
    local suc, data = pcall(function() 
        return HttpService:JSONDecode(res) 
    end)
    
    if not suc or type(data) ~= "table" then
        ui.UpdateProgress(0, "数据解析失败")
        show("验证数据解析失败", "error", 4)
        task.wait(2)
        pcall(function() ui.Gui:Destroy() end)
        P:Kick("验证失败: 数据格式错误")
        return
    end

    ui.UpdateProgress(0.6, "验证卡密...")
    task.wait(0.3)

    -- 查找卡密
    local entry = nil
    for _, v in ipairs(data) do
        if tostring(v.key) == tostring(key) then
            entry = v
            break
        end
    end

    if not entry then
        ui.UpdateProgress(0, "卡密无效")
        show("卡密无效", "error", 4)
        task.wait(2)
        pcall(function() ui.Gui:Destroy() end)
        P:Kick("卡密无效")
        return
    end

    ui.UpdateProgress(0.8, "检查设备绑定...")
    task.wait(0.3)

    -- 检查设备绑定
    local okMatch = false
    entry.bound_devices = entry.bound_devices or {}
    for _, dev in ipairs(entry.bound_devices) do
        pcall(function() 
            if deviceMatches(dev, fp) then 
                okMatch = true 
            end 
        end)
        if okMatch then break end
    end

    if not okMatch then
        ui.UpdateProgress(0, "设备未授权")
        show("设备未绑定此卡密", "error", 4)
        task.wait(2)
        pcall(function() ui.Gui:Destroy() end)
        P:Kick("设备未绑定")
        return
    end

    ui.UpdateProgress(0.9, "验证通过!")
    show("验证通过，加载中...", "success", 2)
    task.wait(1)

    -- 加载远程脚本
    ui.UpdateProgress(0.95, "加载脚本...")
    local ok2, res2 = pcall(function() 
        return game:HttpGet(REMOTE_SCRIPT, true) 
    end)
    
    if not ok2 or not res2 or #res2 < 10 then
        show("脚本加载失败", "error", 4)
        pcall(function() ui.Gui:Destroy() end)
        return
    end

    ui.UpdateProgress(1, "准备就绪")
    task.wait(0.5)

    -- 执行脚本
    local f = loadstring or load
    if f then
        local fn = f(res2)
        if type(fn) == "function" then
            -- 隐藏UI
            pcall(function()
                TweenService:Create(ui.Gui, TweenInfo.new(0.3), {
                    BackgroundTransparency = 1
                }):Play()
                task.wait(0.3)
                ui.Gui:Destroy()
            end)
            
            -- 执行主脚本
            local success, err = pcall(fn)
            if not success then
                warn("脚本执行错误: " .. tostring(err))
                show("脚本执行出错", "error", 3)
            end
        else
            show("脚本格式错误", "error", 3)
        end
    else
        show("加载函数不可用", "error", 3)
    end
end

-- 安全启动验证
local success, err = pcall(main)
if not success then
    warn("验证系统错误: " .. tostring(err))
    show("验证系统出错", "error", 3)
    task.wait(2)
    P:Kick("验证系统错误")
end
